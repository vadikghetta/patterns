// Вы можете создать адаптер . Это специальный объект, который преобразует интерфейс одного объекта так, чтобы его мог понять другой объект.

// Адаптер оборачивает один из объектов, чтобы скрыть сложность преобразования, происходящего за кулисами. Обернутый объект даже не знает об адаптере. Например, вы можете обернуть объект, работающий в метрах и километрах, адаптером, который преобразует все данные в британские единицы, такие как футы и мили.

// Адаптеры могут не только преобразовывать данные в различные форматы, но и помогать объектам с разными интерфейсами сотрудничать. Вот как это работает:

//     Адаптер получает интерфейс, совместимый с одним из существующих объектов.
//     Используя этот интерфейс, существующий объект может безопасно вызывать методы адаптера.
//     При получении вызова адаптер передает запрос второму объекту, но в том формате и порядке, которые ожидает второй объект.

// Иногда можно даже создать двусторонний адаптер, который сможет преобразовывать вызовы в обоих направлениях. 



class KVDatabase {
    private db: Map<string, string> = new Map()
    save (key: string , value : string) {
        this.db.set(key, value)
    }
}

class PersistentDB {
    savePersistent(data : Object) {
        ///
    }
}

class PersistentDBAdapter extends KVDatabase {
    constructor(public database : PersistentDB) {
        super();
    }
     override save(key: string, value: string): void {
        this.database.savePersistent({key, value})
    }
}

function run (base : KVDatabase) {
    base.save("key", "myValue")
}