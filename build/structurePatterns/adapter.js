"use strict";
// Вы можете создать адаптер . Это специальный объект, который преобразует интерфейс одного объекта так, чтобы его мог понять другой объект.
// Адаптер оборачивает один из объектов, чтобы скрыть сложность преобразования, происходящего за кулисами. Обернутый объект даже не знает об адаптере. Например, вы можете обернуть объект, работающий в метрах и километрах, адаптером, который преобразует все данные в британские единицы, такие как футы и мили.
// Адаптеры могут не только преобразовывать данные в различные форматы, но и помогать объектам с разными интерфейсами сотрудничать. Вот как это работает:
//     Адаптер получает интерфейс, совместимый с одним из существующих объектов.
//     Используя этот интерфейс, существующий объект может безопасно вызывать методы адаптера.
//     При получении вызова адаптер передает запрос второму объекту, но в том формате и порядке, которые ожидает второй объект.
// Иногда можно даже создать двусторонний адаптер, который сможет преобразовывать вызовы в обоих направлениях. 
class KVDatabase {
    constructor() {
        this.db = new Map();
    }
    save(key, value) {
        this.db.set(key, value);
    }
}
class PersistentDB {
    savePersistent(data) {
        ///
    }
}
class PersistentDBAdapter extends KVDatabase {
    constructor(database) {
        super();
        this.database = database;
    }
    save(key, value) {
        this.database.savePersistent({ key, value });
    }
}
function run(base) {
    base.save("key", "myValue");
}
